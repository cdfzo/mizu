import type { Icons } from '../utils/icons'

/* eslint max-lines: 0 */
export const logos: Icons = {
  access: [
    '*.accda',
    '*.accdb',
    '*.accde',
    '*.accdr',
    '*.accdt',
    '*.adn',
    '*.laccdb',
    '*.maf',
    '*.mam',
    '*.maq',
    '*.mar',
    '*.mdb',
    '*.mdw',
  ],
  actionscript: ['*.as'],
  ada: ['*.ada', '*.adb', '*.ads'],
  adobe: ['/adobe', '/creative cloud files'],
  aftereffects: ['*.aep'],
  agda: ['*.agda', '*.lagda'],
  android: [
    '/.android',
    '/android',
    '/androidstudioprojects',
    '/apk',
    '*.aab',
    '*.apk',
    '*.apkm',
    '*.apks',
    '*.dex',
    '*.smali',
    '*.xapk',
    'androidmanifest.xml',
  ],
  angular: [
    '.angular-cli.json',
    'angular-cli.json',
    'angular.json',
    'ng-package.json',
  ],
  antlr: ['*.g4'],
  apache: ['.htaccess'],
  applescript: ['*.applescript', '*.ipa', '*.scpt', '*.scptd'],
  appveyor: ['.appveyor.yml', 'appveyor.yml'],
  arduino: ['*.ino'],
  aspnet: ['*.asp', '*.aspx', '*.cshtml', '*.razor', '*.vbhtml'],
  astro: ['*.astro'],
  astroConfig: [
    'astro.config.cjs',
    'astro.config.cts',
    'astro.config.js',
    'astro.config.mjs',
    'astro.config.mts',
    'astro.config.ts',
  ],
  audition: ['*.sesx'],
  aurelia: ['aurelia.json'],
  autohotkey: ['*.ahk'],
  autoit: ['*.au3'],
  azure: ['/.azure', '/.azure-pipelines', '/.azure-pipelines-ci', '/azure'],
  babel: [
    '.babel-plugin-macrosrc',
    '.babel-plugin-macrosrc.js',
    '.babel-plugin-macrosrc.json',
    '.babel-plugin-macrosrc.yaml',
    '.babel-plugin-macrosrc.yml',
    '.babelrc',
    '.babelrc.cjs',
    '.babelrc.js',
    '.babelrc.json',
    '.babelrc.mjs',
    'babel-plugin-macros.config.js',
    'babel-transform.js',
    'babel.config.cjs',
    'babel.config.js',
    'babel.config.json',
    'babel.config.mjs',
  ],
  ballerina: ['*.bal', '*.balx'],
  batch: ['*.bat', '*.btm', '*.cmd'],
  bazel: ['*.bzl', '*.bazel', '.bazelrc', '.bazelversion'],
  bazelIgnore: ['.bazelignore'],
  bitbucket: ['bitbucket-pipelines.yaml', 'bitbucket-pipelines.yml'],
  bithound: ['.bithoundrc'],
  bloc: ['/bloc'],
  brainfuck: ['*.b', '*.bf'],
  browserslist: ['.browserslistrc', 'browserslist'],
  buildkite: ['/.buildkite', '/buildkite', 'buildkite.yaml', 'buildkite.yml'],
  bun: ['/.bun', '/bun', '/bunjs', 'bunfig.toml'],
  bunLock: ['bun.lockb'],
  c: ['/c', '*.c'],
  carbon: ['*.carbon'],
  cargo: ['cargo.toml'],
  cargoLock: ['cargo.lock'],
  ceylon: ['*.ceylon'],
  circleci: ['/.circleci', '/circleci'],
  clean: ['*.abc', '*.dcl', '*.icl'],
  clojure: ['*.clj', '*.cljc', '*.cljs', '*.edn'],
  cloudfoundry: ['.cfignore'],
  cmake: ['/cmake', '/cmaketools'],
  cobol: ['*.cbl', '*.cob'],
  codeclimate: ['.codeclimate.yml'],
  coffeescript: ['*.coffee', '*.litcoffee'],
  coldfusion: ['*.cfc', '*.cfm', '*.cfml', '*.lucee'],
  composer: ['/composer'],
  cpp: [
    '/c++',
    '/cc',
    '/cp',
    '/cpp',
    '/cxx',
    '*.c++',
    '*.cc',
    '*.cp',
    '*.cpp',
    '*.cxx',
  ],
  crystal: ['*.cr'],
  csharp: ['*.cs', '*.csx'],
  css: ['/css', '/style', '/styles', '/stylesheet', '/stylesheets', '*.css'],
  cssApp: ['app.css', 'application.css'],
  cssMap: ['*.css.map'],
  cssRtl: ['*.rtl.css', '*.rtl.min.css'],
  cuda: ['*.cu', '*.cuh'],
  cypress: [
    '/.cypress',
    '/cypress',
    'cypress.config.cjs',
    'cypress.config.js',
    'cypress.config.mjs',
    'cypress.config.ts',
    'cypress.env.json',
    'cypress.json',
  ],
  d: ['*.d'],
  dart: [
    '/.dart',
    '/.dart-tool',
    '/.dart_tool',
    '/.flutter-devtools',
    '/dart',
    '/flutter',
    '*.dart',
    '.pubignore',
    'dart',
  ],
  dartIgnore: ['.dartignore'],
  deno: ['deno.json', 'deno.jsonc'],
  denoLock: ['deno.lock'],
  dependabot: ['dependabot.yaml', 'dependabot.yml'],
  docker: [
    '/.docker',
    '/docker',
    '/dockerfiles',
    '*.dockerfile',
    'compose.yaml',
    'compose.yml',
    'docker-compose.yaml',
    'docker-compose.yml',
    'docker-entrypoint',
    'dockerfile',
  ],
  dockerIgnore: ['.dockerignore'],
  dot: ['*.def', '*.dot', '*.jst'],
  dropbox: ['/drop box', '/dropbox'],
  dylan: ['*.dylan', '*.lid'],
  editorconfig: ['.editorconfig'],
  eiffel: ['*.e'],
  elixir: [
    '/.mix',
    '/elixir',
    '*.eex',
    '*.ex',
    '*.exs',
    '*.heex',
    '*.leex',
    '.elixir',
  ],
  elm: ['*.elm'],
  ember: ['.ember-cli', '.ember-cli.js', 'ember-cli-builds.js'],
  epub: ['*.epub'],
  erlang: ['*.erl', '*.hrl'],
  eslint: [
    '.eslintcache',
    '.eslintrc',
    '.eslintrc.cjs',
    '.eslintrc.js',
    '.eslintrc.json',
    '.eslintrc.yaml',
    '.eslintrc.yml',
    'eslint',
    'eslint.config.js',
    'eslint.config.mjs',
  ],
  eslintIgnore: ['.eslintignore'],
  excel: [
    '*.xla',
    '*.xlam',
    '*.xlb',
    '*.xlc',
    '*.xld',
    '*.xlk',
    '*.xll',
    '*.xlm',
    '*.xlsb',
    '*.xlsm',
    '*.xlsx',
    '*.xlt',
    '*.xltm',
    '*.xlv',
    '*.xlw',
  ],
  fastlane: ['appfile', 'fastfile'],
  figma: ['*.fig', '*.jam'],
  firebase: [
    '/.firebase',
    '/firebase',
    '.firebaserc',
    'firebase.json',
    'firestore.indexes.json',
    'firestore.rules',
  ],
  forgejo: ['/.forgejo'],
  forth: ['*.4th', '*.forth', '*.fth'],
  fortran: ['*.f', '*.f03', '*.f77', '*.f90', '*.f95', '*.for'],
  fsharp: ['*.fs', '*.fsi', '*.fsproj', '*.fsscript', '*.fsx'],
  gatsby: [
    'gatsby-browser.js',
    'gatsby-browser.tsx',
    'gatsby-config.js',
    'gatsby-config.mjs',
    'gatsby-config.ts',
    'gatsby-node.js',
    'gatsby-node.mjs',
    'gatsby-node.ts',
    'gatsby-ssr.js',
    'gatsby-ssr.tsx',
  ],
  gemfile: ['gemfile'],
  gemfileLock: ['gemfile.lock'],
  getx: ['/getx'],
  git: [
    '/.git',
    '/.githooks',
    '/.submodules',
    '/commit',
    '/commits',
    '/git',
    '/git-hooks',
    '/githooks',
    '/patches',
    '/submodules',
    '*.patch',
    '.gitattributes',
    '.gitinclude',
    '.gitkeep',
    '.gitmessage',
    '.gitmodules',
    '.gitpreserve',
    '.keep',
  ],
  gitConfig: ['.git/config', '.gitconfig'],
  gitIgnore: ['.git-blame-ignore', '.git-blame-ignore-revs', '.gitignore'],
  gitea: ['/.gitea'],
  github: [
    '/.github',
    '/github desktop',
    '/github',
    '/issue_template',
    '/workflows',
  ],
  gitlab: ['.gitlab-ci.yml'],
  gitpod: ['.gitpod.yml'],
  gnupg: ['/.gnupg', '/gnupg', '/gpg'],
  go: ['/go', '/go-build', '/golang', '*.go'],
  goMod: ['go.mod', 'go.sum', 'go.work', 'go.work.sum'],
  godot: ['/.godot', '/.godot-cpp', '/godot', '/godot-cpp', '*.gd'],
  gradle: [
    '/.gradle',
    '/gradle',
    '*.gradle',
    'gradle',
    'gradle-wrapper.properties',
    'gradle.properties',
    'gradlew',
  ],
  graphcool: ['*.graphcool'],
  graphql: ['/gql', '/graphql', '*.gql', '*.graphql'],
  graphqlConfig: [
    '.graphqlconfig',
    '.graphqlrc',
    '.graphqlrc.cjs',
    '.graphqlrc.js',
    '.graphqlrc.json',
    '.graphqlrc.toml',
    '.graphqlrc.ts',
    '.graphqlrc.yaml',
    '.graphqlrc.yml',
    'graphql.config.cjs',
    'graphql.config.js',
    'graphql.config.json',
    'graphql.config.toml',
    'graphql.config.ts',
    'graphql.config.yaml',
    'graphql.config.yml',
  ],
  groovy: ['*.groovy', '*.gsh', '*.gvy', '*.gy'],
  gulp: [
    'gulpfile.babel.js',
    'gulpfile.cjs',
    'gulpfile.cts',
    'gulpfile.js',
    'gulpfile.mjs',
    'gulpfile.mts',
    'gulpfile.ts',
  ],
  h: ['*.h'],
  hack: ['*.hack', '*.hck'],
  hackConfig: ['.hhconfig'],
  handlebars: ['*.handlebars', '*.hbs', '*.mustache'],
  harbour: ['*.ch', '*.hb', '*.hbp', '*.prg'],
  hardhat: ['hardhat.config.js', 'hardhat.config.ts'],
  haskell: ['*.hs', '*.lhs'],
  haxe: ['*.hx', '*.hxml'],
  hcl: ['*.hcl'],
  heroku: ['heroku.yml', 'procfile', 'procfile.dev', 'procfile.prod'],
  herokuIgnore: ['.slugignore'],
  hpp: ['*.h++', '*.hh', '*.hpp', '*.hxx', '*.inl', '*.tcc'],
  html: [
    '/html',
    '/markup',
    '/page',
    '/pages',
    '/screen',
    '/screens',
    '/view',
    '/views',
    '*.htm',
    '*.html',
    '*.xhtml',
  ],
  hy: ['*.hy'],
  idris: ['*.ibc', '*.idr'],
  illustrator: ['*.ai'],
  indesign: ['*.indd'],
  intellij: ['/.idea'],
  ios: ['/ios'],
  java: ['/java', '/jvm', '*.java', '*.jmod', '*.jsp'],
  javaClass: ['*.class'],
  javaJar: ['*.jar'],
  jenkins: ['*.jenkins', '*.jenkinsfile', 'jenkinsfile'],
  jinja: ['*.j2', '*.jinja', '*.jinja2'],
  jquery: ['jquery.js', 'jquery.min.js'],
  js: [
    '/javascript',
    '/javascripts',
    '/js',
    '/script',
    '/scripts',
    '*.cjs',
    '*.js',
    '*.mjs',
  ],
  jsApp: ['app.js', 'application.js'],
  jsComponent: ['*.component.js'],
  jsConfig: ['jsconfig.json', 'manifest.js'],
  jsController: ['*.controller.js'],
  jsError: ['*.error.js', '*.exception.js'],
  jsFilter: ['*.filter.js'],
  jsGuard: ['*.guard.js'],
  jsMain: ['index.js', 'main.js'],
  jsMap: ['*.cjs.map', '*.js.map', '*.mjs.map'],
  jsPipe: ['*.pipe.js'],
  jsServer: ['*.server.js'],
  jsService: ['*.service.js'],
  jsStore: ['*.store.js'],
  jsTest: [
    '*.cy.js',
    '*.e2e-spec.cjs',
    '*.e2e-spec.js',
    '*.e2e-spec.mjs',
    '*.js.snap',
    '*.spec.cjs',
    '*.spec.js',
    '*.spec.mjs',
    '*.test.cjs',
    '*.test.js',
    '*.test.mjs',
  ],
  jsWorker: ['service-worker.js', 'serviceworker.js', 'sw.js', 'worker.js'],
  json: [
    '/appdata',
    '/application data',
    '/data',
    '/json',
    '*.json',
    '*.json5',
    '*.jsonc',
    '*.jsonl',
    '*.ndjson',
  ],
  jsonOther: ['*.cson', '*.ron', '*.tf.json'],
  julia: ['/jl', '/julia', '*.jl'],
  jupyter: ['*.ipynb'],
  kh: ['*.kh'],
  kotlin: ['*.kt', '*.ktm', '*.kts'],
  kubernetes: ['/.k8s', '/.kubernetes', '/k8s', '/kubernetes'],
  laravel: ['*.blade.php', '*.inky.php', 'artisan'],
  less: ['*.less'],
  lighthouse: [
    '.lighthouserc.js',
    '.lighthouserc.json',
    '.lighthouserc.yaml',
    '.lighthouserc.yml',
    'lighthouserc.js',
    'lighthouserc.json',
    'lighthouserc.yaml',
    'lighthouserc.yml',
  ],
  // https://lingui.dev/tutorials/setup-react#configuration
  lingui: ['lingui.config.js'],
  linux: ['/arch', '/linux', '/ubuntu', '/wsl', '/wslg'],
  lisp: ['*.lisp', '*.lsp'],
  livescript: ['*.ls'],
  lolcode: ['*.lol', '*.lols'],
  lua: ['/lua', '*.lua', '.luacheckrc'],
  makefile: ['*.mk', 'gnumakefile', 'kbuild', 'makefile'],
  markdown: ['*.markdown', '*.md', '*.rmd', '*.rst'],
  markdownlint: ['.mdlrc'],
  marko: ['*.marko'],
  mathematica: ['*.nb'],
  matlab: [
    '*.m',
    '*.mat',
    '*.mex',
    '*.mlapp',
    '*.mlappinstall',
    '*.mlpkginstall',
    '*.mltbx',
    '*.mlx',
  ],
  maven: [
    '/.mvn',
    '/maven',
    'jvm.config',
    'maven.config',
    'mvnw',
    'mvnw.cmd',
    'pom.xml',
  ],
  mdx: ['*.mdx'],
  mermaid: ['*.mermaid', '*.mmd'],
  minecraft: [
    '*.mca',
    '*.mcaddon',
    '*.mcfunction',
    '*.mcgame',
    '*.mclevel',
    '*.mcmeta',
    '*.mcpack',
    '*.mcproject',
    '*.mcr',
    '*.mcstructure',
    '*.mctemplate',
    '*.mcworld',
    '*.mine',
    '*.mus',
    '.mcattributes',
    '.mcdefinitions',
  ],
  minecraftIgnore: ['.mcignore'],
  mocha: [
    '.mocharc.js',
    '.mocharc.json',
    '.mocharc.jsonc',
    '.mocharc.yaml',
    '.mocharc.yml',
    'mocha.opts',
  ],
  modernizr: ['.modernizrrc', '.modernizrrc.js', '.modernizrrc.json'],
  mojo: ['*.mojo', '*.🔥'],
  // https://github.com/usmanyunusov/nano-staged?tab=readme-ov-file#configuration
  nanostaged: [
    '.nano-staged.cjs',
    '.nano-staged.js',
    '.nano-staged.json',
    '.nano-staged.mjs',
    '.nanostagedrc',
    'nano-staged.cjs',
    'nano-staged.js',
    'nano-staged.json',
    'nano-staged.mjs',
  ],
  netlify: ['netlify.json', 'netlify.toml', 'netlify.yaml', 'netlify.yml'],
  newrelic: ['newrelic.yml'],
  next: [
    'next.config.js',
    'next.config.mjs',
    'next.config.mts',
    'next.config.ts',
  ],
  nginx: ['/nginx', 'fastcgi.conf', 'mime.types', 'nginx.conf', 'proxy.conf'],
  nim: ['*.nim', '*.nimble', '*.nims'],
  node: [
    '/node',
    '/node_modules',
    '/node_modules.nosync',
    '/nodejs',
    '*.node',
    '.esmrc',
    '.node-version',
  ],
  nodemon: ['nodemon-debug.json', 'nodemon.json'],
  npm: ['.npmrc'],
  npmIgnore: ['.npmignore'],
  nrwl: ['nx.json'],
  nrwlIgnore: ['.nxignore'],
  nuxt: ['/.nuxt', '/nuxt', 'nuxt.config.js', 'nuxt.config.ts'],
  nuxtIgnore: ['.nuxtignore'],
  nvm: ['.nvmrc'],
  ocaml: ['*.ml', '*.mli'],
  onenote: ['*.one', '*.onetoc2'],
  pages: ['*.pages'],
  partytown: ['partytown'],
  pdf: ['*.pdf'],
  percy: ['.percy.yml'],
  perl: ['/perl', '*.cgi', '*.pl', '*.plx', '*.pm', '*.pod', '*.t', '*.xs'],
  photoshop: ['*.psb', '*.psd'],
  php: ['/php', '*.phar', '*.php', '*.phps', '*.pht', '*.phtml'],
  pine: ['*.pine'],
  plantuml: ['*.plantuml', '*.pu', '*.puml'],
  plasmic: ['/plasmic', 'plasmic.json'],
  plasmicLock: ['plasmic.lock'],
  playwright: [
    'playwright-ct.config.js',
    'playwright-ct.config.mjs',
    'playwright-ct.config.ts',
    'playwright.config.js',
    'playwright.config.mjs',
    'playwright.config.ts',
  ],
  pnpm: ['.pnpmfile.cjs', 'pnpm-lock.yaml', 'pnpm-workspace.yaml'],
  post: ['*.pcss', '*.sss'],
  postConfig: [
    '.postcssrc',
    '.postcssrc.cjs',
    '.postcssrc.cts',
    '.postcssrc.js',
    '.postcssrc.json',
    '.postcssrc.ts',
    '.postcssrc.yaml',
    '.postcssrc.yml',
    'postcss.config.cjs',
    'postcss.config.cts',
    'postcss.config.js',
    'postcss.config.ts',
  ],
  powerpoint: [
    '*.odp',
    '*.potm',
    '*.potx',
    '*.ppa',
    '*.ppam',
    '*.pps',
    '*.ppsm',
    '*.ppsx',
    '*.ppt',
    '*.pptm',
    '*.pptx',
  ],
  powershell: [
    '*.cdxml',
    '*.ps1',
    '*.ps1xml',
    '*.psc1',
    '*.psd1',
    '*.psm1',
    '*.psrc',
    '*.pssc',
  ],
  premiere: ['*.prproj'],
  prettier: [
    '.prettierrc',
    '.prettierrc.cjs',
    '.prettierrc.js',
    '.prettierrc.json',
    '.prettierrc.toml',
    '.prettierrc.yaml',
    '.prettierrc.yml',
    'prettier.config.cjs',
    'prettier.config.js',
  ],
  prettierIgnore: ['.prettierignore'],
  prisma: ['/prisma', '*.prisma'],
  processing: ['*.pde'],
  prolog: ['*.p', '*.pro'],
  protractor: [
    'protractor.conf.coffee',
    'protractor.conf.js',
    'protractor.conf.ts',
    'protractor.config.js',
    'protractor.config.ts',
  ],
  pug: ['*.jade', '*.pug', '.pug-lintrc', '.pug-lintrc.js', '.pug-lintrc.json'],
  purescript: ['*.purs'],
  pwa: ['*.webmanifest', 'manifest.json'],
  python: [
    '/.pytest_cache',
    '/__pycache__',
    '/pip',
    '/py',
    '/python',
    '*.py',
    '*.pyc',
    '*.pyd',
    '*.pyi',
    '*.pyo',
    '*.pyw',
    '*.pyz',
    '*.whl',
  ],
  r: ['*.r', '*.rda', '*.rdata', '*.rds', '.rhistory'],
  racket: ['*.rkt'],
  rails: ['*.erb', 'rails'],
  railsApp: ['application.html.erb'],
  railsJs: ['*.js.erb'],
  railsText: ['*.text.erb'],
  raku: [
    '*.p6',
    '*.pm6',
    '*.pod6',
    '*.raku',
    '*.rakudoc',
    '*.rakumod',
    '*.rakutest',
    '*.t6',
  ],
  react: [
    '/jsx',
    '/react',
    '/react-dom',
    '/react-native',
    '/reactjs',
    '/vdom',
    '*.jsx',
  ],
  reactTest: [
    '*.cy.jsx',
    '*.spec-d.jsx',
    '*.spec.jsx',
    '*.test-d.jsx',
    '*.test.jsx',
    '*.jsx.snap',
  ],
  reactTs: ['*.tsx'],
  reactTsTest: [
    '*.cy.tsx',
    '*.spec-d.tsx',
    '*.spec.tsx',
    '*.test-d.tsx',
    '*.test.tsx',
    '*.tsx.snap',
  ],
  reason: ['*.re', '*.rei'],
  rebol: ['*.reb'],
  red: ['*.red', '*.reds'],
  remix: ['remix.config.js', 'remix.config.ts'],
  replit: ['.replit'],
  rescript: ['*.res'],
  restql: ['*.restql', '*.rql'],
  rexx: ['*.exec', '*.rex', '*.rexx'],
  riverpod: ['/riverpod'],
  rspec: ['.rspec', 'rspec'],
  rubocop: ['.rubocop.yml', '.rubocop_todo.yml'],
  ruby: [
    '/gem',
    '/gems',
    '/ruby',
    '*.gem',
    '*.gemspec',
    '*.rake',
    '*.rb',
    'rake',
    'rakefile',
  ],
  rubyApp: ['application.rb'],
  rubyBoot: ['boot.rb'],
  rubyConfig: ['config.ru'],
  rubyDatabase: ['schema.rb', 'seeds.rb'],
  rubyEnv: ['development.rb', 'environment.rb', 'production.rb', 'test.rb'],
  rubyFile: ['assets.rb'],
  rubyFilter: ['filter_parameter_logging.rb'],
  rubyHelp: ['rails_helper.rb', 'spec_helper.rb'],
  rubyImport: ['importmap.rb'],
  rubyRoute: ['routes.rb'],
  rubyServer: ['puma.rb'],
  rubyVersion: ['.ruby-version'],
  rust: ['/.cargo', '/.rustup', '/cargo', '/rs', '/rust', '*.rlib', '*.rs'],
  rustMain: ['main.rs'],
  sass: ['/_sass', '/_scss', '/sass', '/scss', '*.sass', '*.scss'],
  sassApp: ['app.sass', 'app.scss', 'application.sass', 'application.scss'],
  scala: ['/sc', '/scala', '*.sc', '*.scala'],
  scratch: [
    '*.sb2',
    '*.sb3',
    '*.scratch',
    '*.sprite',
    '*.sprite2',
    '*.sprite3',
  ],
  semaphore: ['/.semaphore'],
  semgrep: ['semgrep.yml'],
  semgrepIgnore: ['.semgrepignore'],
  sentry: ['.sentryclirc'],
  shell: ['*.awk', '*.ksh', '*.sh'],
  sketch: ['*.sketch'],
  slim: ['*.slim'],
  smallbasic: ['*.sb', '*.smallbasic'],
  snowpack: [
    'snowpack.config.cjs',
    'snowpack.config.cts',
    'snowpack.config.js',
    'snowpack.config.json',
    'snowpack.config.mjs',
    'snowpack.config.mts',
    'snowpack.config.ts',
  ],
  solidity: ['*.sol'],
  sqlite: ['*.db3', '*.s3db', '*.sl3', '*.sqlite', '*.sqlite3'],
  storybook: [
    '*.stories.js',
    '*.stories.jsx',
    '*.stories.mdx',
    '*.stories.svelte',
    '*.stories.ts',
    '*.stories.tsx',
    '*.story.js',
    '*.story.jsx',
    '*.story.mdx',
    '*.story.ts',
    '*.story.tsx',
  ],
  stylelint: [
    '.stylelintcache',
    '.stylelintrc.cjs',
    '.stylelintrc.js',
    '.stylelintrc.json',
    '.stylelintrc.yaml',
    '.stylelintrc.yml',
    'stylelint.config.cjs',
    'stylelint.config.js',
  ],
  stylelintIgnore: ['.stylelintignore'],
  sublime: ['*.sublime-project', '*.sublime-workspace'],
  supabase: ['supabase.js', 'supabase.py'],
  svelte: ['*.svelte'],
  svelteConfig: ['svelte.config.cjs', 'svelte.config.js'],
  svg: [
    '/i',
    '/icns',
    '/ico',
    '/icon',
    '/icons',
    '/icos',
    '/svg',
    '/svgs',
    '*.svg',
    '*.svgz',
  ],
  swc: ['.swcrc'],
  swift: ['swift', '*.swift'],
  tailwind: [
    'tailwind.config.cjs',
    'tailwind.config.cts',
    'tailwind.config.js',
    'tailwind.config.ts',
    'tailwind.js',
    'tailwind.ts',
  ],
  tauri: [
    'tauri.conf.json',
    'tauri.conf.json5',
    'tauri.config.json',
    'tauri.linux.conf.json',
    'tauri.macos.conf.json',
    'tauri.toml',
    'tauri.windows.conf.json',
  ],
  tcl: ['*.tbc', '*.tcl'],
  terraform: ['*.tf', '*.tfstate', '*.tfvars'],
  toml: ['*.toml'],
  torrent: ['*.torrent'],
  touchicon: ['apple-touch-icon-precomposed.png', 'apple-touch-icon.png'],
  travis: ['.travis.yml'],
  ts: [
    '/@types',
    '/ts',
    '/types',
    '/typescript',
    '/typings',
    '*.cts',
    '*.mts',
    '*.ts',
    'tsc',
  ],
  tsApp: ['app.ts', 'application.ts'],
  tsComponent: ['*.component.ts'],
  tsConfig: [
    'tsconfig.cjs.json',
    'tsconfig.dts.json',
    'tsconfig.esm.json',
    'tsconfig.json',
    'tsconfig.test.json',
  ],
  tsController: ['*.controller.ts'],
  tsDef: ['*.d.ts'],
  tsError: ['*.error.ts', '*.exception.ts'],
  tsFilter: ['*.filter.ts'],
  tsGuard: ['*.guard.ts'],
  tsMain: ['index.ts', 'main.ts'],
  tsPipe: ['*.pipe.ts'],
  tsServer: ['*.server.ts'],
  tsService: ['*.service.ts'],
  tsStore: ['*.store.ts'],
  tsTest: [
    '*.cy.ts',
    '*.e2e-spec.cts',
    '*.e2e-spec.mts',
    '*.e2e-spec.ts',
    '*.spec-d.ts',
    '*.spec.cts',
    '*.spec.mts',
    '*.spec.ts',
    '*.test-d.ts',
    '*.test.cts',
    '*.test.mts',
    '*.test.ts',
    '*.ts.snap',
  ],
  tsWorker: ['service-worker.ts', 'serviceworker.ts', 'sw.ts', 'worker.ts'],
  turborepo: ['turbo.json'],
  unity: ['*.unity', '*.unity3d', '*.unitypackage', '*.unityweb'],
  uno: [
    'uno.config.js',
    'uno.config.mjs',
    'uno.config.mts',
    'uno.config.ts',
    'unocss.config.js',
    'unocss.config.mjs',
    'unocss.config.mts',
    'unocss.config.ts',
  ],
  v: ['*.v', 'v.mod', 'vpkg.json'],
  vala: ['vala', '*.vala', '*.vapi'],
  vercel: ['/.now', '/.vercel', '/now', '/vercel', 'now.json', 'vercel.json'],
  vercelIgnore: ['.nowignore', '.vercelignore'],
  verdaccio: ['verdaccio.yml'],
  vim: ['*.vim', '.exrc', '.gvimrc', '.viminfo', '.vimrc'],
  visio: [
    '*.vdw',
    '*.vsd',
    '*.vsdm',
    '*.vsdx',
    '*.vsl',
    '*.vss',
    '*.vssm',
    '*.vssx',
    '*.vst',
    '*.vstm',
    '*.vstx',
  ],
  visualbasic: ['*.vb', '*.vbs'],
  visualstudio: [
    '*.csproj',
    '*.filters',
    '*.ruleset',
    '*.sln',
    '*.suo',
    '*.vcxitems',
    '*.vcxproj',
    '*.vsix',
    '*.vsixmanifest',
  ],
  vite: [
    'vite.config.cjs',
    'vite.config.cts',
    'vite.config.js',
    'vite.config.mjs',
    'vite.config.mts',
    'vite.config.ts',
  ],
  vitest: [
    'vitest.config.cjs',
    'vitest.config.cts',
    'vitest.config.js',
    'vitest.config.mjs',
    'vitest.config.mts',
    'vitest.config.ts',
  ],
  vmware: ['*.nvram', '*.scoreboard', '*.vmdk', '*.vmsd', '*.vmx'],
  vscode: [
    '/.vscode',
    '/.vscode-server',
    '/.vscode-test',
    '/code - insiders',
    '/vscode-extensions',
    '*.code-profile',
    '.vscode/launch.json',
    '.vscode/settings.json',
    '.vscode/tasks.json',
  ],
  vscodeIgnore: ['.vscodeignore'],
  vue: ['/.vuepress', '/vue', '/vue-compat', '/vuejs', '*.vue'],
  vueConfig: [
    'vetur.config.js',
    'vetur.config.ts',
    'volar.config.js',
    'vue.config.js',
    'vue.config.ts',
  ],
  wakatime: ['.wakatime-project', '.wakatime.cfg'],
  watchman: ['.watchmanconfig'],
  webassembly: ['*.wasm', '*.wat'],
  webhint: ['.hintrc'],
  webpack: [
    '/webpack',
    'webpack',
    'webpack.base.js',
    'webpack.base.ts',
    'webpack.common.js',
    'webpack.common.ts',
    'webpack.config.babel.js',
    'webpack.config.babel.ts',
    'webpack.config.base.js',
    'webpack.config.base.ts',
    'webpack.config.cjs',
    'webpack.config.common.js',
    'webpack.config.common.ts',
    'webpack.config.cts',
    'webpack.config.dev.js',
    'webpack.config.dev.ts',
    'webpack.config.js',
    'webpack.config.mjs',
    'webpack.config.mts',
    'webpack.config.prod.js',
    'webpack.config.prod.ts',
    'webpack.config.ts',
    'webpack.dev.js',
    'webpack.dev.ts',
    'webpack.dist.js',
    'webpack.dist.ts',
    'webpack.prod.js',
    'webpack.prod.ts',
    'webpack.test.js',
    'webpack.test.ts',
  ],
  windi: ['*.windi', 'windi.config.js', 'windi.config.json', 'windi.config.ts'],
  windows: ['/system32', '/win', '/windows'],
  wolfram: ['*.wl'],
  word: [
    '*.doc',
    '*.docb',
    '*.docm',
    '*.docx',
    '*.dotm',
    '*.dotx',
    '*.odt',
    '*.rtf',
    '*.wbk',
  ],
  xd: ['*.xd'],
  xml: [
    '*.classpath',
    '*.dtd',
    '*.entitlements',
    '*.iml',
    '*.jrxml',
    '*.manifest',
    '*.plist',
    '*.project',
    '*.resx',
    '*.tmlanguage',
    '*.xcscheme',
    '*.xcsettings',
    '*.xcworkspacedata',
    '*.xml',
    '*.xml.dist',
    '*.xml.dist.sample',
    '*.xquery',
    '*.xsd',
    '*.xsl',
    '*.xslt',
  ],
  yarn: [
    '.yarn-integrity',
    '.yarnclean',
    '.yarnrc',
    '.yarnrc.yaml',
    '.yarnrc.yml',
    'yarn',
    'yarn-error.log',
  ],
  yarnLock: ['yarn.lock'],
  yml: ['*.yaml', '*.yaml-tmlanguage', '*.yaml.dist', '*.yml', '*.yml.dist'],
  ymlApp: ['application.yaml', 'application.yml'],
  ymlCi: ['ci.yaml', 'ci.yml'],
  ymlDatabase: ['database.yaml', 'database.yml'],
  ymlExample: ['example.yaml', 'example.yml', 'sample.yaml', 'sample.yml'],
  ymlFunding: ['funding.yaml', 'funding.yml'],
  ymlPublish: ['publish.yaml', 'publish.yml'],
  ymlStorage: ['storage.yaml', 'storage.yml'],
  zenodo: ['.zenodo.json'],
  zig: ['/zig', '*.zig', '*.zir', '*.zon'],
}
